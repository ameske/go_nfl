#!/usr/bin/python

'''
scrapeSchedule.py

Parses the DOM of www.nfl.com/schedules to load the database with the
matchups for the current season.

Work required each season:
  1. Update 'schedule_url' to the current root URL for the NFL's schedules.
  2. Change the parameter to scrape() to the current year
  3. Change the file name to the current year

@author: Kyle Ames
@date: August 23, 2015
'''
import datetime
import re
import sys
import json

import urllib2
from bs4 import BeautifulSoup

schedule_url_template = 'http://www.nfl.com/schedules/{}/REG'

def is_away_team(css_class):
  return css_class == "team-name away lost" or css_class == "team-name away "

def is_home_team(css_class):
  return css_class == "team-name home lost" or css_class == "team-name home "

def scrape(year, url, start, endweek):
    games = []

    for week_no in range(int(start), endweek):
        
        # OPEN UP THE HTML FOR EACH WEEK
        page = urllib2.urlopen(url + str(week_no))
        scheduleHTML = BeautifulSoup(page.read(), "html.parser")
        
        # PARALLEL LISTS OF AWAY, HOME, TIME
        away_teams  = [ str(tag.string) for tag in scheduleHTML.find_all(class_="team-name away ") ]
        home_teams  = [ str(tag.string) for tag in scheduleHTML.find_all(class_="team-name home ") ]
        times       = [ str(tag.string) for tag in scheduleHTML.find_all(class_="time") ]
        dates       = [ str(tag.find_previous(class_="schedules-list-date").contents[1].strings.next()).replace(',', '') for tag in scheduleHTML.find_all(class_="list-matchup-row-team") ]

        #  MERGE times and dates AND THEN BRING BACK INTO A DATETIME LIST
        dates_times = zip(dates, times)
        dates       = [ dt[0] + " 2015 " + dt[1] + " PM EST" for dt in dates_times]

        # HANDLE THE CASE WHERE THE NFL PUTS A 'Next Game' ROW IN THE HTML
        shift = False
        for i in range(0, len(dates)):
            if 'Next Game' in dates[i]:
                shift = True
                break
        if shift:
            away_teams = away_teams[1:]
            home_teams = home_teams[1:]
            dates = dates[1:]

        datetimes = [ datetime.datetime.strptime(date_string, '%A %B %d %Y %I:%M %p %Z') for date_string in dates ]
        
        # CREATE MATCHUP TUPLES AND CONVERT THEM INTO A DICTIONARY FOR JSON
        matchups = zip(away_teams, home_teams, datetimes)      
        for matchup in matchups:
            d = {
                    "year": int(year),
                    "week": week_no,
                    "away": matchup[0],
                    "home": matchup[1],
                    "date": matchup[2].isoformat(),
            }
            games.append(d)

    return games

def main():
    year = sys.argv[1]
    start = sys.argv[2]
    endweek = int(sys.argv[3]) + 1
    schedule = schedule_url_template.format(year)
    schedule = scrape(year, schedule, start, endweek)
    print json.dumps(schedule)
    
if __name__=='__main__':
    main()
    
